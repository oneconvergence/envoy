static_resources:
  listeners:
  - name: main
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          stat_prefix: ingress_http
          codec_type: auto
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                route: 
                  cluster: service1
                  timeout: 0s
          http_filters:
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.config.filter.http.lua.v2.Lua
              inline_code: |
                local constants = require("lib.testredis")
                if request_count == nil then
                   request_count = 0
                end
                if app_port == nil then
                   app_port = constants.getValue("port")
                end
                function envoy_on_request(request_handle)
                  request_count = request_count + 1
                  constants.setValue("request-count", request_count)
                end
                function envoy_on_response(response_handle)
                  response_handle:headers():add("modified-host", constants.getValue("host"))
                  response_handle:headers():add("modified-port", app_port)
                  response_handle:headers():add("request-count", constants.getValue("request-count"))
                end
          - name: envoy.filters.http.router
            typed_config: {}

  clusters:
  - name: service1
    circuit_breakers:
      thresholds:
      - priority: HIGH
        max_connections: 1000000000
        max_pending_requests: 1000000000
        max_requests: 1000000000
        max_retries: 1000000000
    connect_timeout: 0.25s
    type: STRICT_DNS
    lb_policy: ROUND_ROBIN
    http2_protocol_options: {}
    load_assignment:
      cluster_name: service1
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: servicemk1
                port_value: 80

admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
