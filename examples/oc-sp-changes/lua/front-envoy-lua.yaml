static_resources:
  listeners:
  - name: new
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8080
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          stat_prefix: ingress_http
          codec_type: auto
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                direct_response:
                  status: 200
                  body:
                    inline_string: "Hello"
          http_filters:
          - name: envoy.filters.http.router
            typed_config: {}

  - name: main
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          stat_prefix: ingress_http
          codec_type: auto
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                route: 
                  cluster: service1
                  timeout: 0s
          http_filters:
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.config.filter.http.lua.v2.Lua
              inline_code: |
                function envoy_on_request(request_handle)
                  local headers = request_handle:headers()
                  for key, value in pairs(headers) do
                    print(key.." "..value)
                  end
                  local connection = request_handle:connection()
                  if connection:ssl() == nil then
                    print("plain")
                  else
                    print("secure")
                  end
                  --Using bodyChunks method to process chunked body (ER-14)
                  local index = 0
                  for chunk in request_handle:bodyChunks() do
                    local len = chunk:length()
                    request_handle:logInfo("Req-id: "..request_handle:headers():get('x-request-id')..", Index: "..tostring(index)..", Chunk length: "..tostring(len))
                    if len == 0 then break end
                    local result = chunk:getBytes(0, len)
                    index = index + len
                  end
                  request_handle:streamInfo():dynamicMetadata():set(
                      "envoy.filters.http.lua",
                      "request.info",
                      {
                          something="something"
                      }
                  )
                end
                function envoy_on_response(response_handle)
                  --body_size = response_handle:body():length()
                  --response_handle:headers():add("response-body-size", tostring(body_size))
                  local index = 0
                  for chunk in response_handle:bodyChunks() do
                    local len = chunk:length()
                    response_handle:logInfo("Index: "..tostring(index)..", Chunk length: "..tostring(len))
                    if len == 0 then break end
                    local result = chunk:getBytes(0, len)
                    index = index + len
                  end
                  --Using dynamicMetadata to access variables set during request (ER-15)
                  local meta = response_handle:streamInfo():dynamicMetadata():get("envoy.filters.http.lua")["request.info"]
                  response_handle:logInfo("Something: "..meta.something)
                end
          - name: envoy.filters.http.router
            typed_config: {}

  clusters:
  - name: service1
    circuit_breakers:
      thresholds:
      - priority: HIGH
        max_connections: 1000000000
        max_pending_requests: 1000000000
        max_requests: 1000000000
        max_retries: 1000000000
    connect_timeout: 0.25s
    #type: STRICT_DNS
    type: STATIC
    lb_policy: ROUND_ROBIN
    #http2_protocol_options: {}
    load_assignment:
      cluster_name: service1
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 127.0.0.1
                port_value: 8888
                #address: 172.20.0.1
                #port_value: 8080

admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
